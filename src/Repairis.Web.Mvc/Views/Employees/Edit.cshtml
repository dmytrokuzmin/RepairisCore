@model Repairis.Users.Dto.EmployeeBasicEntityDto
@{
    ViewBag.Title = "Edit";
}
<div>
    <a asp-action="Index">Back to List</a>
</div>
<h3>Edit employee</h3>
<hr />
<form asp-action="Edit" method="post">
    <div class="form-horizontal">
        <div class="form-group">
            <label asp-for="Surname" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="Surname" class="form-control" />
                <span asp-validation-for="Surname" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Name" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="FatherName" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="FatherName" class="form-control" />
                <span asp-validation-for="FatherName" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="PhoneNumber" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="PhoneNumber" class="form-control" />
                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="SecondaryPhoneNumber" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="SecondaryPhoneNumber" class="form-control" />
                <span asp-validation-for="SecondaryPhoneNumber" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="EmailAddress" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="EmailAddress" class="form-control" />
                <span asp-validation-for="EmailAddress" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Address" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="Address" class="form-control" />
                <span asp-validation-for="Address" class="text-danger"></span>

            </div>
        </div>
        <div class="form-group">
            <label asp-for="SalaryValue" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="SalaryValue" class="form-control" />
                <span asp-validation-for="SalaryValue" class="text-danger"></span>
                <div class="checkbox">
                    <label>
                        <input asp-for="SalaryIsFlat" /> @L("SalaryIsFlat")
                    </label>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
</form>

<div class="panel panel-default">
    <div class="panel-heading">
        <h4>Is assigned to orders:</h4>
    </div>
    <div class="panel-body">
        * table of employees's orders *
        @*@(Html.EJ().Grid<OrderBasicEntityDto>("Orders")
              .Datasource(Model.AssignedOrders.Items)
              .AllowSelection(false)
              .AllowSorting()
              .SortSettings(sort => sort.SortedColumns(col => col.Field("Id").Direction(SortOrder.Descending).Add()))
              .AllowPaging()
              .AllowTextWrap(true)
              //.EnablePersistence(true)
              .PageSettings(p => { p.PageSize(10); })
              .AllowFiltering(true)
              .FilterSettings(filter => filter.FilterType(FilterType.Excel))
              .EnableTouch(false)


              //.ToolbarSettings(toolbar => { toolbar.ShowToolbar().ToolbarItems(items => { items.AddTool(ToolBarItems.Search); }); })
              //.ClientSideEvents(eve => eve.Load("loadAdaptor"))
              .Columns(col =>
              {
                  col.Template("<a href=\"/Orders/Edit/{{:Id}}\"><i class=\"fa fa-pencil fa\" aria-hidden=\"true\"></i></a>" +
                               "<a href=\"/Orders/Delete/{{:Id}}\"><i class=\"fa fa-trash-o fa\" aria-hidden=\"true\"></i></a>").AllowSorting(false).AllowFiltering(false).AllowGrouping(false).Width(60).Add();
                  col.Field(x => x.Id).HeaderText("OrderId").Width(75).IsPrimaryKey(true).Add();
                  col.Field(x => x.OrderCreationDate).HeaderText(L("OrderCreationDate")).Width(90).Format("{0:dd.MM.yyyy}").Add();
                  //col.HeaderText(L("OrderStatus")).Template("{{:Id}}").Add();
                  //col.Field(x => x.IsUrgent).HeaderText("OrderIsUrgent").Width(75).Add();
                  //col.Field(x => x.IsWarrantyComplaint).HeaderText("OrderIsWarrantyComplaint").Width(75).Add();
                  col.Field(x => x.OrderStatus).HeaderText(L("OrderStatus")).Width(75).Add();
                  col.Field(x => x.AssignedMasterFullName).HeaderText(L("AssignedMaster")).Width(150).Add();
                  col.Field(x => x.DeviceModel).HeaderText(L("Device")).Width(200).Add();
                  col.Field(x => x.IssueDescription).HeaderText(L("IssueDescription")).Width(200).Add();
                  col.Field(x => x.CustomerFullName).HeaderText(L("Customer")).Add();
                  col.Field(x => x.CustomerPhoneNumber).HeaderText(L("CustomerPhoneNumber")).Add();
              }))*@
    </div>
</div>
